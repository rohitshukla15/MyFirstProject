git init:-

# change directory to codebase
$ cd /file/path/to/code

# make directory a git repository
$ git init



git config:-

# Running git config globally
$ git config --global user.email "rohit.dhruv1988@gmail.com"
$ git config --global user.name "rohit"

# Running git config on the current repository settings
$ git config user.email "rohit.dhruv1988@gmail.com"
$ git config user.name "rohit"


git add:-

# To add all files not staged:
$ git add .

# To stage a specific file:
$ git add index.html

# To stage an entire directory:
$ git add css


git commit:-

# Adding a commit with message
$ git commit -m "Commit message in quotes"


git status:-

$ git status



git branch:-

# Create a new branch
$ git branch <branch_name>

# List all remote or local branches
$ git branch -a

# Delete a branch
$ git branch -d <branch_name>



git checkout:-

# Checkout an existing branch
$ git checkout <branch_name>

# Checkout and create a new branch with that name
$ git checkout -b <new_branch>


git merge:-

# Merge changes into current branch
$ git merge <branch_name>



Working with remote repositories:-

git remote:-
#To connect a local repository with a remote repository. 
#A remote repository can have a name set to avoid having to remember the URL of the repository.

# Adding a remote repository with the name of beanstalk
$ git remote add origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git

# List named remote repositories
$ git remote -v
origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git (fetch)
origin git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git (push)




git clone:-
#To create a local working copy of an existing remote repository, 
#use git clone to copy and download the repository to a computer. 
#Cloning is the equivalent of git init when working with a remote repository. 
#Git will create a directory locally with all files and repository history.

$ git clone git@account_name.git.beanstalkapp.com:/acccount_name/repository_name.git
Cloning into 'repository_name'...
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (5/5), 3.08 KiB | 0 bytes/s, done.
Checking connectivity... done.





git pull:-

$ git pull <branch_name> <remote_URL/remote_name>



git push:-

$ git push <remote_URL/remote_name> <branch>

# Push all local branches to remote repository
$ git push —all



Advanced Git Commands

git stash:-
# Store current work with untracked files
$ git stash -u

# Bring stashed work back to the working directory
$ git stash pop


git log:-

Receiving objects: 100% (5/5), 3.08 KiB | 0 bytes/s, done.
Checking connectivity... done.





git pull:-

$ git pull <branch_name> <remote_URL/remote_name>



git push:-

$ git push <remote_URL/remote_name> <branch>

# Push all local branches to remote repository
$ git push —all



Advanced Git Commands

git stash:-
# Store current work with untracked files
$ git stash -u

# Bring stashed work back to the working directory
$ git stash pop


git log:-

# Show entire git log
$ git log

# Show git log with date pameters
$ git log --<after/before/since/until>=<date>

# Show git log based on commit author
$ git log --<author>="Author Name"

# Show git log in one line
$ git log --oneline


git rm:-

# To remove a file from the working index (cached):
$ git rm --cached <file name>

# To delete a file (force):
$ git rm -f <file name>

# To remove an entire directory from the working index (cached):
$ git rm -r --cached <directory name>

# To delete an entire directory (force):
$ git rm -r -f <file name>


































